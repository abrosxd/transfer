import React, { useState, useEffect } from "react";
import { useSettings } from "../../utils/Settings";
import "./Transfer.scss";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
const formatTextWithLineBreaks = (text) => {
  return text.split("\n").map((str, index) => (
    <React.Fragment key={index}>
      {str}
      <br />
    </React.Fragment>
  ));
};

const formatTextAsList = (text) => {
  return (
    <ul>
      {text.split("\n").map((str, index) => (
        <li key={index}>{str}</li>
      ))}
    </ul>
  );
};

const TransferCard = ({
  city1,
  city2,
  price,
  timing,
  configuration,
  description,
}) => (
  <div className="card">
    <h3>
      {city1} - {city2}
    </h3>
    <div className="grid">
      {price && (
        <div className="price">
          <h5>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</h5>
          <h5>{formatTextWithLineBreaks(price)}</h5>
        </div>
      )}
      {timing && (
        <div className="timing">
          <h5>‚åö –í—Ä–µ–º—è –≤ –ø—É—Ç–∏:</h5>
          <h5>{timing}</h5>
        </div>
      )}
      {configuration && (
        <div className="configuration">
          <h5>üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</h5>
          {formatTextAsList(configuration)}
        </div>
      )}
      {description && (
        <div className="description">
          <h5>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</h5>
          <h5>{formatTextWithLineBreaks(description)}</h5>
        </div>
      )}
      <div className="info">
        <h6>
          –ó–∞–∫–∞–∑–∞—Ç—å –∏ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ "–û–±—Ä–∞—Ç–Ω–∞—è
          —Å–≤—è–∑—å" –∏ –∑–∞–ø–æ–ª–Ω–∏–≤ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏–ª–∏ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º –Ω–∞—Ö–æ–¥—è—â–∏–º—Å—è –≤
          –º–µ–Ω—é —Å–∞–π—Ç–∞.
        </h6>
      </div>
    </div>
  </div>
);

export default function Transfer() {
  const { apiKey, baseId, tableTransfer, fetchTableData } = useSettings();
  const [transferData, setTransferData] = useState([]);
  const [cities, setCities] = useState([]);
  const [filters, setFilters] = useState({ from: "", to: "", passengers: 1 });

  // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ city1 –∏ city2
  const getUniqueCities = (transfers) => {
    const citySet = new Set();

    transfers.forEach((record) => {
      if (record.city1) citySet.add(record.city1);
      if (record.city2) citySet.add(record.city2);
    });

    return Array.from(citySet);
  };

  useEffect(() => {
    const loadTransfer = async () => {
      try {
        const fetchedTransfer = await fetchTableData(
          apiKey,
          baseId,
          tableTransfer
        );

        console.log("–î–∞–Ω–Ω—ã–µ –∏–∑ Airtable:", fetchedTransfer);

        const transferData = fetchedTransfer.map((record) => ({
          city1: record.–ì–æ—Ä–æ–¥1 || "",
          city2: record.–ì–æ—Ä–æ–¥2 || "",
          priceSedan: record.–°—Ç–æ–∏–º–æ—Å—Ç—å–°–µ–¥–∞–Ω || "",
          priceBus: record.–°—Ç–æ–∏–º–æ—Å—Ç—å–ë—É—Å || "",
          timing: record.–í—Ä–µ–º—è–ü—É—Ç–∏ || "",
          configuration: record.–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è || "",
          description: record.–ü—Ä–∏–º–µ—á–∞–Ω–∏—è || "",
        }));

        setTransferData(transferData);

        // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const uniqueCities = getUniqueCities(transferData);
        setCities(uniqueCities);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Airtable:", error);
      }
    };

    loadTransfer();
  }, [apiKey, baseId, tableTransfer, fetchTableData]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prevFilters) => ({
      ...prevFilters,
      [name]: value,
    }));
  };

  // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
  const filteredTransfers = transferData.filter((transfer) => {
    const isFromMatch = filters.from
      ? transfer.city1 === filters.from || transfer.city2 === filters.from
      : false;
    const isToMatch = filters.to
      ? transfer.city1 === filters.to || transfer.city2 === filters.to
      : false;
    const hasPrice =
      (filters.passengers >= 1 &&
        filters.passengers <= 3 &&
        transfer.priceSedan) ||
      (filters.passengers >= 4 && filters.passengers <= 8 && transfer.priceBus);
    return isFromMatch && isToMatch && hasPrice;
  });

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
  const getPrice = (transfer) => {
    const passengers = Number(filters.passengers);
    if (passengers >= 1 && passengers <= 3) {
      return transfer.priceSedan;
    } else if (passengers >= 4 && passengers <= 8) {
      return transfer.priceBus;
    }
    return null;
  };

  return (
    <main className="transfer">
      <div className="status">
        <h1>–¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã</h1>
        <div className="items">
          <div className="search">
            <div className="filter from">
              <label htmlFor="fromFilter">–û—Ç–∫—É–¥–∞</label>
              <select
                id="fromFilter"
                name="from"
                value={filters.from}
                onChange={handleFilterChange}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</option>
                {cities.map((city, index) => (
                  <option key={index} value={city}>
                    {city}
                  </option>
                ))}
              </select>
            </div>
            <div className="filter to">
              <label htmlFor="toFilter">–ö—É–¥–∞</label>
              <select
                id="toFilter"
                name="to"
                value={filters.to}
                onChange={handleFilterChange}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥</option>
                {cities.map((city, index) => (
                  <option key={index} value={city}>
                    {city}
                  </option>
                ))}
              </select>
            </div>
            <div className="filter passengers">
              <label htmlFor="passengersFilter">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤</label>
              <select
                id="passengersFilter"
                name="passengers"
                value={filters.passengers}
                onChange={handleFilterChange}
              >
                {[...Array(8)].map((_, i) => (
                  <option key={i + 1} value={i + 1}>
                    {i + 1}
                  </option>
                ))}
              </select>
            </div>
          </div>
          <div className="container">
            {filteredTransfers.length > 0 ? (
              filteredTransfers.map((transfer, index) => (
                <TransferCard
                  key={index}
                  city1={transfer.city1}
                  city2={transfer.city2}
                  price={getPrice(transfer)}
                  timing={transfer.timing}
                  configuration={transfer.configuration}
                  description={transfer.description}
                />
              ))
            ) : (
              <h3 className="none">
                –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
              </h3>
            )}
          </div>
        </div>
      </div>
      <div className="sticker">
        <img src="/assets/all-transfer.gif" alt="Transfer" />
      </div>
    </main>
  );
}
