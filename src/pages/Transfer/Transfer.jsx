import React, { useState, useEffect } from "react";
import { useSettings } from "../../utils/Settings";
import "./Transfer.scss";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
const formatTextWithLineBreaks = (text) => {
  return text.split("\n").map((str, index) => (
    <React.Fragment key={index}>
      {str}
      <br />
    </React.Fragment>
  ));
};

const formatTextAsList = (text) => {
  return (
    <ul>
      {text.split("\n").map((str, index) => (
        <li key={index}>{str}</li>
      ))}
    </ul>
  );
};

const TransferCard = ({
  direction,
  type,
  price,
  date,
  timing,
  configuration,
  description,
}) => (
  <div className="card">
    {direction && <h3>{direction}</h3>}
    <div className="grid">
      {type && (
        <div className="type">
          <h5>üë§ –¢–∏–ø —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞:</h5>
          <h5>{type}</h5>
        </div>
      )}
      {price && (
        <div className="price">
          <h5>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</h5>
          <h5>{formatTextWithLineBreaks(price)}</h5>
        </div>
      )}
      {date && (
        <div className="date">
          <h5>üóìÔ∏è –î–∞—Ç—ã:</h5>
          <h5>{formatTextWithLineBreaks(date)}</h5>
        </div>
      )}
      {timing && (
        <div className="timing">
          <h5>‚åö –í—Ä–µ–º—è –≤ –ø—É—Ç–∏:</h5>
          <h5>{timing}</h5>
        </div>
      )}
      {configuration && (
        <div className="configuration">
          <h5>üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</h5>
          {formatTextAsList(configuration)}
        </div>
      )}
      {description && (
        <div className="description">
          <h5>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</h5>
          <h5>{formatTextWithLineBreaks(description)}</h5>
        </div>
      )}
    </div>
  </div>
);

export default function Transfer() {
  const { apiKey, baseId, tableTransfer, fetchTableData } = useSettings();

  const [transferData, setTransferData] = useState([]);

  useEffect(() => {
    const loadTransfer = async () => {
      try {
        const fetchedTransfer = await fetchTableData(
          apiKey,
          baseId,
          tableTransfer
        );

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        console.log("–î–∞–Ω–Ω—ã–µ –∏–∑ Airtable:", fetchedTransfer);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        const transferData = fetchedTransfer.map((record) => ({
          direction: record.–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ || "",
          type: record.–¢–∏–ø || "",
          price: record.–°—Ç–æ–∏–º–æ—Å—Ç—å || "",
          date: record.–î–∞—Ç—ã || "",
          timing: record.–í—Ä–µ–º—è–ü—É—Ç–∏ || "",
          configuration: record.–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è || "",
          description: record.–ü—Ä–∏–º–µ—á–∞–Ω–∏—è || "",
        }));

        setTransferData(transferData); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Airtable:", error);
      }
    };

    loadTransfer();
  }, [apiKey, baseId, tableTransfer, fetchTableData]);

  return (
    <main className="transfer">
      <div className="status">
        <h1>–¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã</h1>
        <div className="items">
          <h3 className="title">–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤</h3>
          <div className="container">
            {transferData.length > 0 ? (
              transferData.map((transfer, index) => (
                <TransferCard key={index} {...transfer} />
              ))
            ) : (
              <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
            )}
          </div>
        </div>
      </div>
      <div className="sticker">
        <img src="/assets/all-transfer.gif" alt="Transfer" />
      </div>
    </main>
  );
}
